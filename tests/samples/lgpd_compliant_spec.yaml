openapi: 3.0.0
info:
  title: LGPD-Compliant API
  version: 1.0.0
  description: |
    This API demonstrates LGPD compliance best practices for handling personal data.
    All endpoints and schemas follow data minimization and purpose limitation principles.
  contact:
    name: API Support
    url: https://api.example.com/support

servers:
  - url: https://api.example.com/v1
    description: Production server

paths:
  /users:
    post:
      summary: Create a new user
      description: |
        Creates a new user in the system. This endpoint follows data minimization principles
        by only collecting essential information needed for user registration.
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegistration"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        description: Unique identifier for the user
        schema:
          type: string
          format: uuid
    get:
      summary: Get user information
      description: |
        Retrieves user information. Only returns non-sensitive data.
        Sensitive data is handled separately through secure endpoints.
      operationId: getUser
      responses:
        "200":
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    UserRegistration:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
          description: User's full name
          example: "John Doe"
        email:
          type: string
          description: User's email address
          example: "user@example.com"
        phone:
          type: string
          description: User's phone number (optional)
          example: "+55 11 98765-4321"

    UserResponse:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the user
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          description: User's full name
          example: "John Doe"
        email:
          type: string
          description: User's email address (masked)
          example: "j***@example.com"

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: Error code
          example: "INVALID_INPUT"
        message:
          type: string
          description: Error message
          example: "Invalid input provided"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication
