name: Swagger/OpenAPI Validator CI

on:
  push:
    branches:
      - main
    paths:
      - "src/**.py"
      - "tests/**.py"
      - ".forbidden_keys.yaml"
      - ".github/workflows/swagger_validator.yml"
  pull_request:
    branches:
      - main
    paths:
      - "src/**.py"
      - "tests/**.py"
      - ".forbidden_keys.yaml"
      - ".github/workflows/swagger_validator.yml"

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.7.4"
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install # This will respect the Python version pinned in the project

      - name: Install the project
        run: uv sync --locked --all-extras --dev

      - name: Run tests
        run: uv run pytest tests

      - name: Run Swagger Validator on dummy file (expect failure)
        run: uv run run.py sample_problem_spec.yaml
        # This step is expected to fail (exit code 1) because dummy_swagger.yaml contains 'apiKey'
        # We can make it more robust by checking the exit code explicitly if needed,
        # or by having a clean dummy file for a success check.
        # For now, let's allow it to fail to demonstrate the validator catching an issue.
        continue-on-error: true # Allow this step to "fail" (exit 1) without failing the whole workflow

      - name: Run Swagger Validator on clean dummy file (expect success)
        run: |
          uv run run.py sample_clean_spec.yaml
        # This step should pass (exit code 0)
